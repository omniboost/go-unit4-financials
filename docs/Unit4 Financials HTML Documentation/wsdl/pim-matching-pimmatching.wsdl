<?xml version="1.0" encoding="UTF-8"?>
<definitions targetNamespace="http://www.coda.com/pim/schemas/matching/pimmatching-13.0/webservice" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:matchingws="http://www.coda.com/pim/schemas/matching/pimmatching-13.0/webservice">
  <types>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:pimtypes="http://www.coda.com/pim/schemas/common"
    xmlns:inv="http://www.coda.com/pim/schemas/invoice"
    xmlns:presmas="http://www.coda.com/efinance/schemas/presenter"
    xmlns:matng="http://www.coda.com/pim/schemas/matching"
    xmlns:pimusr="http://www.coda.com/pim/schemas/user"
    xmlns:lrn="http://www.coda.com/pim/schemas/logicalreceiptnote"
    xmlns:com="http://www.coda.com/efinance/schemas/common"
    xmlns:docmas="http://www.coda.com/pim/schemas/documentmaster"
    xmlns:matching="http://www.coda.com/pim/schemas/matching"
    xmlns:dbn="http://www.coda.com/pim/schemas/debitnote"
    xmlns:matmas="http://www.coda.com/pim/schemas/matchingmaster"
    xmlns:group="http://www.coda.com/pim/schemas/group"
    xmlns:cmt="http://www.coda.com/pim/schemas/comment"
    xmlns:selmas="http://www.coda.com/efinance/schemas/selectormaster"
    xmlns:pimsel="http://www.coda.com/pim/schemas/selector"
    xmlns:build="http://www.coda.com/common/schemas/funcsec"
    xmlns:sel="http://www.coda.com/efinance/schemas/selector"
    xmlns:gsl="http://www.coda.com/efinance/schemas/selectormaster"
    xmlns:taxmas="http://www.coda.com/pim/schemas/taxmaster"
    xmlns:sunlinemas="http://www.coda.com/pim/schemas/sundrylinemaster"
    xmlns:pimcom="http://www.coda.com/pim/schemas/common"
    targetNamespace="http://www.coda.com/pim/schemas/matching/pimmatching-13.0/webservice"
    attributeFormDefault="unqualified" elementFormDefault="qualified">
    <xsd:import namespace="http://www.coda.com/pim/schemas/common" schemaLocation="pim/common/common.xsd"/>
    <xsd:import namespace="http://www.coda.com/pim/schemas/taxmaster" schemaLocation="pim/taxmaster/taxmaster.xsd"/>
    <xsd:import namespace="http://www.coda.com/pim/schemas/matching" schemaLocation="../wsdl/pim/matching/matching.xsd"/>
    <xsd:import
        namespace="http://www.coda.com/pim/schemas/sundrylinemaster" schemaLocation="pim/sundrylinemaster/sundrylinemaster.xsd"/>
    <xsd:import
        namespace="http://www.coda.com/efinance/schemas/selector" schemaLocation="finance/selector/selector.xsd"/>
    <xsd:import namespace="http://www.coda.com/pim/schemas/invoice" schemaLocation="pim/invoice/invoice.xsd"/>
    <xsd:import namespace="http://www.coda.com/pim/schemas/group" schemaLocation="pim/group/group.xsd"/>
    <xsd:import namespace="http://www.coda.com/pim/schemas/user" schemaLocation="pim/user/user.xsd"/>
    <xsd:import namespace="http://www.coda.com/pim/schemas/debitnote" schemaLocation="pim/debitnote/debitnote.xsd"/>
    <xsd:import namespace="http://www.coda.com/pim/schemas/selector" schemaLocation="pim/selector/selector.xsd"/>
    <xsd:import namespace="http://www.coda.com/pim/schemas/comment" schemaLocation="pim/comment/comment.xsd"/>
    <xsd:import namespace="http://www.coda.com/efinance/schemas/common" schemaLocation="finance/common/common.xsd"/>
    <xsd:import
        namespace="http://www.coda.com/efinance/schemas/presenter" schemaLocation="finance/presenter/presenter.xsd"/>
    <xsd:import
        namespace="http://www.coda.com/pim/schemas/matchingmaster" schemaLocation="pim/matchingmaster/matchingmaster.xsd"/>
    <xsd:import
        namespace="http://www.coda.com/pim/schemas/logicalreceiptnote" schemaLocation="pim/logicalreceiptnote/logicalreceiptnote.xsd"/>
    <xsd:import
        namespace="http://www.coda.com/efinance/schemas/selectormaster" schemaLocation="finance/selectormaster/selectormaster.xsd"/>
    <xsd:import
        namespace="http://www.coda.com/pim/schemas/documentmaster" schemaLocation="pim/documentmaster/documentmaster.xsd"/>
    <xsd:element name="ApplyGroupTotalToLineDiscrepancyRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master with the
                                reason codes defined.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group we are going to
                                apply the discrepancy on.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MLineKeyKeyList" type="group:MLineKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The keys of the mlines that we
                                want to attach a discrepancy to. The
                                account mask is not used if these are
                                passed in.              NB - invoiceKey
                                and MLineKey are mutually exclusive, an
                                error will be thrown if they are both
                                passed in.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ResolutionMethod" type="pimtypes:typePimMlineDiscrepancy">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The resolution method to
                                apply, i.e. write-off, debit note or
                                RFC.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ReasonCode" type="com:typeCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The reason code to be applied
                                to the discrepancy.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ReasonDescription" minOccurs="0" type="com:typeDescription">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The description for the reason
                                code.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Value" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The overall discrepancy value
                                to split across the lines.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Account" type="pimtypes:typePimAccountCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The account code to be applied
                                to each discrepancy line.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="AccountMask" type="com:typeText">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The account mask useed to
                                select the actual lines to be used.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Comment" minOccurs="0" type="com:typeTextB">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       An optional comment to be
                                added to each discrepancy.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyDiscrepanciesResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="DiscrepancyDetail"
                    maxOccurs="unbounded" type="matng:DiscrepancyDetail">
                    <xsd:annotation>
                        <xsd:documentation>The discrepancyDetail is an
                            out argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupError" minOccurs="0"
                    maxOccurs="unbounded" type="matng:GroupError">
                    <xsd:annotation>
                        <xsd:documentation>The groupError is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeGroupAssignmentsRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one that we are interested in        and
                                any other groups that it may reference
                                directly or indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group from which to purge
                                assignments.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="AddToGroupResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeMLineAssignmentRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one that holds the invoice line we are
                                interested in        and any other
                                groups that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MLine" type="group:MLineKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the MLine to purge
                                the assignment for.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="EditMLineRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one with the Mine we are
                                editing.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MLine" type="group:MLine">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The edited version of the
                                MLine.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PreviewDebitNoteRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one we are interested in and       any
                                others that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Invoice" type="inv:Invoice">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The invoice.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ChangeDiscrepancyResponse">
        <xsd:complexType>
            <xsd:sequence/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyGroupTotalToLineDiscrepancyResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="DiscrepancyLinesKey" minOccurs="0"
                    maxOccurs="unbounded" type="group:MLineKey">
                    <xsd:annotation>
                        <xsd:documentation>The discrepancyLines is an
                            out argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Warnings" minOccurs="0"
                    maxOccurs="unbounded" type="matng:DocumentToLineDiscrepancyWarning">
                    <xsd:annotation>
                        <xsd:documentation>The warnings is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="IsInvoiceGreaterThanReceiptRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one we are interested in and       any
                                others that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group to which the invoice
                                belongs.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Invoice" type="inv:Invoice">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The invoice key.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="AssignLinesResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CalculateTaxValueResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="CalculateTaxValue" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>The return value of the
                            calculateTaxValue function.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CheckDocumentTolerancesRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="User" type="com:typeCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>      The user whose tolerances we
                                are going to check.     </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="DiscrepancyType" type="pimtypes:typePimMlineDiscrepancy">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group to apply the tax
                                tolerances to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Company" type="com:typeCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The invoice ID.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceID" type="com:typeDbGuid">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The invoice ID.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="DiscrepancyValue" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The discrepancy value.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ValidateUngroupRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one we are interested in and       any
                                others that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group to remove items
                                from.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKeyList" type="inv:InvoiceKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of invoices to be
                                removed from the group.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MLineKeyList" type="group:MLineKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of mLines to be removed
                                from the group.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="EditInvoiceLineResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="SplitLineRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one we are interested in and       any
                                others that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group to which the mline
                                belongs.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MLine" type="group:MLineKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The m line to be split.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Quantity" minOccurs="0" type="com:typeNumber">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The quantity to leave on the m
                                line.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Value" minOccurs="0" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The value to leave on the m
                                line.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Invoice" minOccurs="0" type="inv:Invoice">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The invoice to be part
                                matched, passed so can check sign before
                                splitting line.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CreateSundryLineWithMasterRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one with the invoice we are
                                going to add       the sundry line to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupKey" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the group that
                                contains the invoice we wish to add the
                                sundry line to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKey" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice that we
                                wish to add the sundry line to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Value" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The value to create the sundry
                                line for.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LineSense" type="pimtypes:typePimLineDrCrIndicator">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The sense of the line to
                                create.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="TaxKey" minOccurs="0" type="taxmas:TaxMasterKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The tax to use for the sundry
                                line.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="SundryLineMaster" type="sunlinemas:SundryLineMasterKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The sundry line master to use
                                when creating the sundry line.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PreviewGroupLevelDebitNoteResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Debitnote" type="dbn:DebitNote">
                    <xsd:annotation>
                        <xsd:documentation>The debitnote is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="DebitNoteMLine" minOccurs="0"
                    maxOccurs="unbounded" type="group:MLine">
                    <xsd:annotation>
                        <xsd:documentation>The debitNoteMLine is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Invoice" type="inv:Invoice">
                    <xsd:annotation>
                        <xsd:documentation>The return value of the get function.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyDocumentDiscrepancyRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master with the
                                reason codes defined.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one we are going to
                                apply the discrepancy on and any other
                                groups that it relates to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupKey" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the group that we
                                wish to apply the discrepancy to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKey" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice that we
                                wish to apply the discrepancy to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ResolutionMethod" type="pimtypes:typePimMlineDiscrepancy">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The resolution method to
                                apply, i.e. write-off, debit note or
                                RFC.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ReasonCode" type="com:typeCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The reason code to be applied
                                to the discrepancy.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ReasonDescription" minOccurs="0" type="com:typeDescription">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The description for the reason
                                code.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Value" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The value to apply the
                                discrepancy for.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Account" type="pimtypes:typePimAccountCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The account code for the
                                discrepancy.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Tax" minOccurs="0" type="taxmas:TaxMasterKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The tax to use for the
                                discrepancy.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CreateSundryLineWithMasterResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetAvailableLRNLinesRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="LrnLineKeyList" type="lrn:LRNLineKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key for the lrn line to
                                get.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ResolveAccountCodeLightResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="SoftAccount" type="pimtypes:typePimAccountCode">
                    <xsd:annotation>
                        <xsd:documentation>The softAccount is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeInvoiceAssignmentsResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="SaveGroupsRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master to save
                                the groups to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The groups to be saved to the
                                database.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="CommitAll" type="com:typeBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       Determines whether or not all
                                groups should be saved or just those
                                that are balanced        true - commit
                                all groups        false - commit
                                balanced groups only      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LogTitle" type="pimtypes:typePimLogtitle">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The title for the log to which
                                this interactive       run will write.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyDiscrepanciesRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master with the
                                reason codes defined.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one we are going to
                                apply discrepancies on and any other
                                groups that it relates to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the group that we
                                wish to apply discrepancies to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="DiscrepancyDetailList" type="matng:PIMMatchingApplyDiscrepanciesDiscrepancyDetailList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The list of discrepancy detail
                                objects which describe       the
                                discrepancies the user wishes to apply.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ResolveAccountCodeResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="SoftAccount" type="pimtypes:typePimAccountCode">
                    <xsd:annotation>
                        <xsd:documentation>The softAccount is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ConvertSundryLineToMatchableLineResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CalculateTaxValueForTaxBalancedInvoiceRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="NetValueDTO" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The net value to calculate the
                                tax value from.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="TaxKey" type="taxmas:TaxMasterKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the tax master to
                                get the effective       rate from.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="AccountCode" type="pimtypes:typePimAccountCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The       </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKey" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice for
                                which we are calculating tax.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeGroupAssignmentsResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ValidateGroupLevelDebitNoteRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MlinesList" type="group:MLineList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Debitnote" type="dbn:DebitNote">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The debit note.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="DebitnoteEdits" type="group:GroupLevelDebitNoteEdits">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The debit note edits (user
                                editable stuff).      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetInvoicesRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="InvoiceKeyList" type="inv:InvoiceKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key for the invoice to
                                get.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeInvoiceAssignmentsRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one that holds the invoice we are
                                interested in        and any other
                                groups that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Invoice" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice to
                                purge the assignments for.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CreateSundryLineWithAccountCodeResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetAvailableLRNLinesResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="LrnLine" maxOccurs="unbounded" type="lrn:LRNLine">
                    <xsd:annotation>
                        <xsd:documentation>The lrnLine is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyDiscrepanciesWithTaxTolerancesRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master currently
                                in use. This could       have been
                                edited by the user at runtime.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one we are going to
                                apply discrepancies on and any other
                                groups that it relates to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the group that we
                                wish to apply discrepancies to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="DiscrepancyDetailList" type="matng:PIMMatchingApplyDiscrepanciesWithTaxTolerancesDiscrepancyDetailList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The list of discrepancy detail
                                objects which describe       the
                                discrepancies the user wishes to apply.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyTaxTolerancesResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="EditGroup" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The editGroup is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="Options">
        <xsd:complexType>
            <xsd:attribute name="bulkload" type="xsd:boolean"/>
            <xsd:attribute name="logtitle" type="com:typeLogTitle"/>
            <xsd:attribute name="attachments" type="com:typeAttachments" default="none"/>
            <xsd:attribute name="locale" type="com:typeLocale"/>
            <xsd:attribute name="origin" type="xsd:string"/>
            <xsd:attribute name="handlingdata" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>For internal use only.</xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="user" type="com:typeGeneralCode"/>
            <xsd:attribute name="company" type="com:typeGeneralCode"/>
            <xsd:attribute name="session" type="xsd:string"/>
            <xsd:attribute name="slot" type="xsd:nonNegativeInteger"/>
            <xsd:attribute name="transactionid" type="xsd:string"/>
            <xsd:attribute name="txtimeout" type="xsd:int"/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="MoveGroupMembersResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" minOccurs="2"
                    maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="SaveGroupsResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="FailedGroup" minOccurs="0"
                    maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The failedGroup is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="PostFailedGroup" minOccurs="0"
                    maxOccurs="unbounded" type="matng:GroupError">
                    <xsd:annotation>
                        <xsd:documentation>The postFailedGroup is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupError" minOccurs="0"
                    maxOccurs="unbounded" type="matng:GroupError">
                    <xsd:annotation>
                        <xsd:documentation>The GroupError is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="PostLogs" minOccurs="0"
                    maxOccurs="unbounded" type="matng:PostLog">
                    <xsd:annotation>
                        <xsd:documentation>The PostLogs is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyTaxTolerancesRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="EditGroup" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group to apply the tax
                                tolerances to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of related groups.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master with the
                                reason codes defined.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeGroupDiscrepanciesRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one that we are interested in        and
                                any other groups that it may reference
                                directly or indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group from which to purge
                                discrepancies.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="UngroupRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one we are interested in and       any
                                others that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group to remove items
                                from.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKeyList" type="inv:InvoiceKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of invoices to be
                                removed from the group.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MLineKeyList" type="group:MLineKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of mLines to be removed
                                from the group.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="UpdateLRNLineCommentsResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="UpdateLRNLineComments" type="com:typeUWord">
                    <xsd:annotation>
                        <xsd:documentation>The return value of the
                            updateLRNLineComments function.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Comments" maxOccurs="unbounded" type="cmt:Comment">
                    <xsd:annotation>
                        <xsd:documentation>The Comments is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="RunBackgroundMatchingResponse">
        <xsd:complexType>
            <xsd:sequence/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="UngroupResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Invoice" minOccurs="0"
                    maxOccurs="unbounded" type="inv:Invoice">
                    <xsd:annotation>
                        <xsd:documentation>The invoice is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LrnLine" minOccurs="0"
                    maxOccurs="unbounded" type="lrn:LRNLine">
                    <xsd:annotation>
                        <xsd:documentation>The lrnLine is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetMLinesForInvoiceResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MLine" minOccurs="0"
                    maxOccurs="unbounded" type="group:MLine">
                    <xsd:annotation>
                        <xsd:documentation>The mLine is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetLRNsResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Lrn" maxOccurs="unbounded" type="lrn:LRN">
                    <xsd:annotation>
                        <xsd:documentation>The lrn is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="RunBackgroundMatchingRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="LogTitle" type="pimtypes:typePimLogtitle">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The title for the log to which
                                this background       run will write.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LogDetail" type="pimtypes:typePimLogDetailLevel">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The level of logging
                                information to write.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The version of the matching
                                master held by the       client should
                                be passed in as they could       have
                                modified it.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeInvoiceLineAssignmentsResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="SaveGroupAsWIPResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="AssignLinesWithFilterRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master with the
                                assignment rules defined on.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one we are going to
                                run assignment on and any other groups
                                that it relates to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the group that we
                                wish to run assignment on.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ConvertSundryLineToMatchableLineRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one with the invoice line we
                                are going to convert.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupKey" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the group that
                                contains the invoice line we wish to
                                convert.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceLineKey" type="inv:InvoiceLineKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice line
                                that we wish to convert.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="MoveGroupMembersRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups involved in
                                the moves. Note, the direction is inout.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MoveDefintionList" type="matng:PIMMatchingMoveGroupMembersMoveDefintionList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of MoveDefinitions
                                holding information about which
                                group members should move to which
                                groups.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="UpdateLRNLineCommentsRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="LrnLineKey" type="lrn:LRNLineKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The LRN Line key.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="CommentsList" type="cmt:CommentList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The comments.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="SplitLineResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LrnLine" type="lrn:LRNLine">
                    <xsd:annotation>
                        <xsd:documentation>The lrnLine is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ChangeDiscrepancyRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="ResolutionMethod" type="pimtypes:typePimMlineDiscrepancy">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The resolution method to
                                apply, i.e. write-off, debit note or
                                RFC.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="DiscrepancyMLine" type="group:MLineKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The ID of the discrepancy
                                MLine to change.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="User" type="pimusr:UserKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The User requesting the
                                change.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ReasonCode" type="com:typeCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The reason code for the new
                                discrepancy.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Comment" minOccurs="0" type="com:typeTextB">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>        User added comment when the
                                discrepancy is changed.       </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="FinaliseResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="FailedGroup" minOccurs="0"
                    maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The failedGroup is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="CommitedGroup" minOccurs="0"
                    maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The commitedGroup is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="UncommitedGroup" minOccurs="0"
                    maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The uncommitedGroup is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="PostFailedGroup" minOccurs="0"
                    maxOccurs="unbounded" type="matng:GroupError">
                    <xsd:annotation>
                        <xsd:documentation>The postFailedGroup is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupError" minOccurs="0"
                    maxOccurs="unbounded" type="matng:GroupError">
                    <xsd:annotation>
                        <xsd:documentation>The GroupError is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="PostLogs" minOccurs="0"
                    maxOccurs="unbounded" type="matng:PostLog">
                    <xsd:annotation>
                        <xsd:documentation>The PostLogs is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyDiscrepanciesWithTaxTolerancesResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="DiscrepancyDetail"
                    maxOccurs="unbounded" type="matng:DiscrepancyDetail">
                    <xsd:annotation>
                        <xsd:documentation>The discrepancyDetail is an
                            out argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupError" minOccurs="0"
                    maxOccurs="unbounded" type="matng:GroupError">
                    <xsd:annotation>
                        <xsd:documentation>The groupError is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetAssociatedLRNsRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups involved with
                                the mLines.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MLineList" type="group:MLineList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The list of mLines to retrieve
                                the lrns for.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyDocumentTotalToLineDiscrepancyRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master with the
                                reason codes defined.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group we are going to
                                apply the discrepancy on.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKey" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice that we
                                wish to apply the discrepancy to. The
                                account mask must also be passed
                                in to pick out which lines will have the
                                discreapancy applied.              NB -
                                invoiceKey and MLineKey are mutually
                                exclusive, an error will be thrown if
                                they are both passed in.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MLineKeyKeyList" type="group:MLineKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The keys of the mlines that we
                                want to attach a discrepancy to. The
                                account mask is not used if these are
                                passed in.              NB - invoiceKey
                                and MLineKey are mutually exclusive, an
                                error will be thrown if they are both
                                passed in.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ResolutionMethod" type="pimtypes:typePimMlineDiscrepancy">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The resolution method to
                                apply, i.e. write-off, debit note or
                                RFC.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ReasonCode" type="com:typeCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The reason code to be applied
                                to the discrepancy.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ReasonDescription" minOccurs="0" type="com:typeDescription">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The description for the reason
                                code.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Value" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The overall discrepancy value
                                to split across the lines.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Account" type="pimtypes:typePimAccountCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The account code to be applied
                                to each discrepancy line.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="AccountMask" type="com:typeText">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The account mask useed to
                                select the actual lines to be used.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Comment" minOccurs="0" type="com:typeTextB">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       An optional comment to be
                                added to each discrepancy.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PreviewGroupLevelDebitNoteRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one we are interested in and       any
                                others that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="InvoiceKey" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>The key to the Invoice object.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CalculateTaxValueForTaxBalancedInvoiceResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element
                    name="CalculateTaxValueForTaxBalancedInvoice" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>The return value of the
                            calculateTaxValueForTaxBalancedInvoice function.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="FinaliseRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master currently
                                in use. This could       have been
                                edited by the user at runtime.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The groups to have be
                                finalised.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="CommitAll" type="com:typeBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       Determines whether or not all
                                groups should be saved or just those
                                that are balanced        true - commit
                                all groups        false - commit
                                balanced groups only       Note, this
                                setting will be ignored unless the
                                finalise action equals
                                PIM_MATCHMAS_FINALISE_ASSIGN_BALANCE_AND_COMMIT
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LogTitle" type="pimtypes:typePimLogtitle">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The title for the log to which
                                this interactive       run will write.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ResolveAccountCodeLightRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master with the
                                reason codes defined.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ResolutionMethod" type="pimtypes:typePimMlineDiscrepancy">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The resolution method to
                                apply, i.e. write-off, debit note or
                                RFC.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="SoftAccount" type="pimtypes:typePimAccountCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The account code to resolve.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="CompanyCode" type="com:typeCode">
                    <xsd:annotation/>
                </xsd:element>
                <xsd:element name="DocumentNumber" type="com:typeDocNumAlpha">
                    <xsd:annotation/>
                </xsd:element>
                <xsd:element name="DocumentMaster" type="docmas:DocumentMasterKey">
                    <xsd:annotation/>
                </xsd:element>
                <xsd:element name="SupplierCode" type="com:typeCode">
                    <xsd:annotation/>
                </xsd:element>
                <xsd:element name="DepartmentCode" minOccurs="0" type="com:typeCode">
                    <xsd:annotation/>
                </xsd:element>
                <xsd:element name="UdfElement1" minOccurs="0" type="com:typeElmCodeB">
                    <xsd:annotation/>
                </xsd:element>
                <xsd:element name="UdfElement2" minOccurs="0" type="com:typeElmCodeB">
                    <xsd:annotation/>
                </xsd:element>
                <xsd:element name="UdfElement3" minOccurs="0" type="com:typeElmCodeB">
                    <xsd:annotation/>
                </xsd:element>
                <xsd:element name="UdfElement4" minOccurs="0" type="com:typeElmCodeB">
                    <xsd:annotation/>
                </xsd:element>
                <xsd:element name="UdfElement5" minOccurs="0" type="com:typeElmCodeB">
                    <xsd:annotation/>
                </xsd:element>
                <xsd:element name="UdfElement6" minOccurs="0" type="com:typeElmCodeB">
                    <xsd:annotation/>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyEditsAndToleranceCheckResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="DiscrepancyDetail" minOccurs="0"
                    maxOccurs="unbounded" type="matng:DiscrepancyDetail">
                    <xsd:annotation>
                        <xsd:documentation>The discrepancyDetail is an
                            out argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupError" minOccurs="0"
                    maxOccurs="unbounded" type="matng:GroupError">
                    <xsd:annotation>
                        <xsd:documentation>The groupError is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CreateGroupForSingleInvoiceRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Invoice" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice to
                                create the group for.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MatchingMaster" minOccurs="0" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master to use
                                (optional)      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="SelectorMaster" minOccurs="0" type="pimsel:Selector">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The LRN selector to use
                                (prompts completed) for grouping (if no
                                criteria specified on the matching
                                master).      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CreateGroupForSingleInvoiceResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>The matchingMaster is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupError" type="matng:GroupError">
                    <xsd:annotation>
                        <xsd:documentation>The groupError is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="RefreshGroupResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetWIPGroupsRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupKeyList" type="group:GroupKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The keys of the wip groups be
                                loaded.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CreateGroupRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master to use.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups that this new
                                one will reference. This will be by way
                                of LRN lines that have       been split.
                                It is likely that the group may not be
                                related to any other in which case none
                                need to be passed in.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKeyKeyList" type="inv:InvoiceKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The keys for the invoices to
                                put in the group.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LrnLineKeyKeyList" type="lrn:LRNLineKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The keys for the lrn lines to
                                put in the group. The keys are passed if
                                the line hasn&apos;t been loaded up by
                                the client before.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LrnLineList" type="lrn:LRNLineList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The lrn lines to put in the
                                group. The full line should be passed in
                                if       it has been loaded up by the
                                client before.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="AddToGroupRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one we are interested in and       any
                                others that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group to add the items to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKeyKeyList" type="inv:InvoiceKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The keys for the invoices to
                                put in the group.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LrnLineKeyKeyList" type="lrn:LRNLineKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The keys for the lrn lines to
                                put in the group. The keys are passed if
                                the line hasn&apos;t been loaded up by
                                the client before.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LrnLineList" type="lrn:LRNLineList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The lrn lines to put in the
                                group. The full line should be passed in
                                if       it has been loaded up by the
                                client before.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ManuallyAssignLinesResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetLRNLinesRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="LrnLineKeyList" type="lrn:LRNLineKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key for the lrn line to
                                get.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="BalanceUnassignedInvoiceLineRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one with the invoice line we
                                are going to balance.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupKey" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the group that
                                contains the invoice line we wish to
                                balance.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceLineKey" type="inv:InvoiceLineKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice line
                                that we wish to balance.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ResolutionMethod" type="pimtypes:typePimMlineDiscrepancy">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The resolution method to apply
                                to the discrepancy.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master with the
                                reason codes defined.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ReasonCode" type="com:typeCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The reason code to be applied
                                to the discrepancy.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CalculateTaxValueRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="NetValueDTO" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The net value to calculate the
                                tax value from.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="TaxKey" type="taxmas:TaxMasterKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the tax master to
                                get the effective       rate from.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="AccountCode" type="pimtypes:typePimAccountCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The       </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKey" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice for
                                which we are calculating tax.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ValidateUngroupResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="ValidateUngroup" type="com:typeBoolean">
                    <xsd:annotation>
                        <xsd:documentation>The return value of the
                            validateUngroup function.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="UpdateInvoiceHeaderPrintableCommentsRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="InvoiceKey" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The invoice key.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="PrintableCommentList" type="matng:PIMMatchingUpdateInvoiceHeaderPrintableCommentsPrintableCommentList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The printable comments.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CalculateTaxForSundyLineResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="CalculateTaxForSundyLine" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>The return value of the
                            calculateTaxForSundyLine function.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CreateGroupResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="CreateGroup" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The return value of the
                            createGroup function.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="DeleteGroupResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Invoice" maxOccurs="unbounded" type="inv:Invoice">
                    <xsd:annotation>
                        <xsd:documentation>The invoice is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LrnLine" minOccurs="0"
                    maxOccurs="unbounded" type="lrn:LRNLine">
                    <xsd:annotation>
                        <xsd:documentation>The lrnLine is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeInvoiceLineAssignmentsRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one that holds the invoice line we are
                                interested in        and any other
                                groups that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceLine" type="inv:InvoiceLineKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice line to
                                purge the assignments for.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="DeleteGroupRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one we are interested in and       any
                                others that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group to delete.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeMLineAssignmentResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CheckDocumentTolerancesResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="CheckDocumentTolerances" type="com:typeBoolean">
                    <xsd:annotation>
                        <xsd:documentation>The return value of the
                            checkDocumentTolerances function.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyDocumentDiscrepancyResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupError" minOccurs="0"
                    maxOccurs="unbounded" type="matng:GroupError">
                    <xsd:annotation>
                        <xsd:documentation>The groupError is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CheckLineTolerancesRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="User" type="com:typeCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>      The user whose tolerances we
                                are going to check.     </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="DiscrepancyType" type="pimtypes:typePimMlineDiscrepancy">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group to apply the tax
                                tolerances to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Company" type="com:typeCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The invoice ID.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MLineID" type="com:typeDbGuid">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The discrepancy mLine ID.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ValidateDiscrepancyTaxDetailsRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>      List of groups including the
                                one we are interested in and      any
                                others that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Invoice" type="inv:Invoice">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The invoice to be validated.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeInvoiceDiscrepanciesRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one that holds the invoice we are
                                interested in        and any other
                                groups that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Invoice" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice for
                                which to purge the discrepancies.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyDocumentTotalToLineDiscrepancyResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="DiscrepancyLinesKey" minOccurs="0"
                    maxOccurs="unbounded" type="group:MLineKey">
                    <xsd:annotation>
                        <xsd:documentation>The discrepancyLines is an
                            out argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Warnings" minOccurs="0"
                    maxOccurs="unbounded" type="matng:DocumentToLineDiscrepancyWarning">
                    <xsd:annotation>
                        <xsd:documentation>The warnings is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="RefreshGroupRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group to refresh.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetMLinesForInvoiceRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master to use.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one that holds the invoice we are
                                interested in        and any other
                                groups that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKey" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice we wish
                                to retrieve the MLines for.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="AssignLinesWithFilterResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupError" minOccurs="0"
                    maxOccurs="unbounded" type="matng:GroupError">
                    <xsd:annotation>
                        <xsd:documentation>The groupError is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="BalanceUnassignedInvoiceLineResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="EditInvoiceLineRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one with the invoice line we
                                are        editing.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceLine" type="inv:InvoiceLine">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The edited version of the
                                invoice line.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ApplyEditsAndToleranceCheckRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one with the invoice line we
                                are        editing.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupKey" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the group that
                                contains the invoice line we wish to
                                convert.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceToAlwaysToleranceCheckKeyList" type="inv:InvoiceKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice that we
                                wish to apply the discrepancy to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceLineList" type="inv:InvoiceLineList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The edited version of the
                                invoice line.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="DiscrepancyDetailList" type="matng:PIMMatchingApplyEditsAndToleranceCheckDiscrepancyDetailList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The list of discrepancy detail
                                objects which describe       the
                                discrepancies the user wishes to apply.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master with the
                                reason codes defined.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="SaveGroupAsWIPRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master to save
                                the groups to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The groups to be saved to the
                                database.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeInvoiceDiscrepanciesResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="OptionsResponse">
        <xsd:complexType>
            <xsd:attribute name="transactioncoordinator" type="xsd:string"/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetInvoicesResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Invoice" maxOccurs="unbounded" type="inv:Invoice">
                    <xsd:annotation>
                        <xsd:documentation>The invoice is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ConvertToSundryLineResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="IsInvoiceGreaterThanReceiptResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="IsInvoiceGreaterThanReceipt" type="com:typeBoolean">
                    <xsd:annotation>
                        <xsd:documentation>The return value of the
                            isInvoiceGreaterThanReceipt function.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ValidateDiscrepancyTaxDetailsResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ConvertToSundryLineRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one with the invoice line we
                                are going to convert.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupKey" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the group that
                                contains the invoice line we wish to
                                convert.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceLineKey" type="inv:InvoiceLineKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice line
                                that we wish to convert.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeMLineRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one we are interested in and       any
                                others that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The group to purge the m line
                                from.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MLine" type="group:MLineKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the mLine to be
                                purged from the group.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetWIPGroupsResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PreviewDebitNoteResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Debitnote" type="dbn:DebitNote">
                    <xsd:annotation>
                        <xsd:documentation>The debitnote is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="UpdateInvoiceHeaderPrintableCommentsResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="UpdateInvoiceHeaderPrintableComments" type="com:typeUWord">
                    <xsd:annotation>
                        <xsd:documentation>The return value of the
                            updateInvoiceHeaderPrintableComments function.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="PrintableComment"
                    maxOccurs="unbounded" type="com:typeTextB">
                    <xsd:annotation>
                        <xsd:documentation>The printableComment is an
                            out argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeGroupDiscrepanciesResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CreateSundryLineWithAccountCodeRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one with the invoice we are
                                going to add       the sundry line to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupKey" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the group that
                                contains the invoice we wish to add the
                                sundry line to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKey" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice that we
                                wish to add the sundry line to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Value" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The value to create the sundry
                                line for.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LineSense" type="pimtypes:typePimLineDrCrIndicator">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The sense of the line to
                                create.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="TaxKey" minOccurs="0" type="taxmas:TaxMasterKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The tax to use for the sundry
                                line.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="AccountCode" type="pimtypes:typePimAccountCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The account code to use when
                                creating the sundry line.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ValidateGroupLevelDebitNoteResponse">
        <xsd:complexType>
            <xsd:sequence/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="EditMLineResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CalculateTaxForSundyLineRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       List of groups including the
                                one we are interested in and       any
                                others that it may reference directly or
                                indirectly.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice that we
                                wish to add the sundry line to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MatchingMasterKey" type="matmas:MatchingMasterKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice that we
                                wish to add the sundry line to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKey" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice that we
                                wish to add the sundry line to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="NetValueDTO" type="com:Money">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The net value to calculate the
                                tax value from.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="LineSense" type="pimtypes:typePimLineDrCrIndicator">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The sundry line sense.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="TaxKey" type="taxmas:TaxMasterKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the tax master to
                                get the effective       rate from.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="AccountCode" type="pimtypes:typePimAccountCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The account code of the sundry
                                line.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="PurgeMLineResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Group" maxOccurs="unbounded" type="group:Group">
                    <xsd:annotation>
                        <xsd:documentation>The group is an out argument,
                            so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetLRNLinesResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="LrnLine" maxOccurs="unbounded" type="lrn:LRNLine">
                    <xsd:annotation>
                        <xsd:documentation>The lrnLine is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetLRNsRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="LrnKeyList" type="lrn:LRNKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key for the lrn to get.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ResolveAccountCodeRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master with the
                                reason codes defined.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one we are going to
                                apply the discrepancy on and any other
                                groups that it relates to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupKey" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the group that we
                                wish to apply the discrepancy to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKey" type="inv:InvoiceKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the invoice that we
                                wish to apply the discrepancy to.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ResolutionMethod" type="pimtypes:typePimMlineDiscrepancy">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The resolution method to
                                apply, i.e. write-off, debit note or
                                RFC.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="SoftAccount" type="pimtypes:typePimAccountCode">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The account code to resolve.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CheckLineTolerancesResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="CheckLineTolerances" type="com:typeBoolean">
                    <xsd:annotation>
                        <xsd:documentation>The return value of the
                            checkLineTolerances function.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ManuallyAssignLinesRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master with the
                                assignment rules defined on.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       A list of groups. It should
                                contain the one we are going to
                                run assignment on and any other groups
                                that it relates to.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="Group" type="group:GroupKey">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The key to the group that we
                                wish to run assignment on.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceKeyList" type="inv:InvoiceKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The list of invoice keys that
                                should be used during assignment.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="InvoiceLineKeyList" type="inv:InvoiceLineKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The list of invoice line keys
                                that should be used during assignment.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="MLineKeyList" type="group:MLineKeyList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The list of MLine keys that
                                should be used during assignment.
                            </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="GetAssociatedLRNsResponse">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Association" maxOccurs="unbounded" type="matng:LRNMLineAssociation">
                    <xsd:annotation>
                        <xsd:documentation>The association is an out
                            argument, so the server will put it here.</xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="AssignLinesRequest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="MatchingMaster" type="matmas:MatchingMaster">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The matching master with the
                                assignment rules defined on.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="GroupList" type="group:GroupList">
                    <xsd:annotation>
                        <xsd:documentation>
                                <p>       The groups to run assignment
                                upon.      </p>                             </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
</xsd:schema>
  </types>
  <message name="ApplyEditsAndToleranceCheckRequest">
    <part name="ApplyEditsAndToleranceCheckRequest" element="matchingws:ApplyEditsAndToleranceCheckRequest"/>
  </message>
  <message name="ValidateGroupLevelDebitNoteRequest">
    <part name="ValidateGroupLevelDebitNoteRequest" element="matchingws:ValidateGroupLevelDebitNoteRequest"/>
  </message>
  <message name="SplitLineRequest">
    <part name="SplitLineRequest" element="matchingws:SplitLineRequest"/>
  </message>
  <message name="ManuallyAssignLinesRequest">
    <part name="ManuallyAssignLinesRequest" element="matchingws:ManuallyAssignLinesRequest"/>
  </message>
  <message name="AssignLinesResponse">
    <part name="AssignLinesResponse" element="matchingws:AssignLinesResponse"/>
  </message>
  <message name="CalculateTaxForSundyLineRequest">
    <part name="CalculateTaxForSundyLineRequest" element="matchingws:CalculateTaxForSundyLineRequest"/>
  </message>
  <message name="ValidateDiscrepancyTaxDetailsRequest">
    <part name="ValidateDiscrepancyTaxDetailsRequest" element="matchingws:ValidateDiscrepancyTaxDetailsRequest"/>
  </message>
  <message name="CreateGroupResponse">
    <part name="CreateGroupResponse" element="matchingws:CreateGroupResponse"/>
  </message>
  <message name="ApplyDocumentTotalToLineDiscrepancyResponse">
    <part name="ApplyDocumentTotalToLineDiscrepancyResponse" element="matchingws:ApplyDocumentTotalToLineDiscrepancyResponse"/>
  </message>
  <message name="ChangeDiscrepancyRequest">
    <part name="ChangeDiscrepancyRequest" element="matchingws:ChangeDiscrepancyRequest"/>
  </message>
  <message name="AddToGroupResponse">
    <part name="AddToGroupResponse" element="matchingws:AddToGroupResponse"/>
  </message>
  <message name="ValidateGroupLevelDebitNoteResponse">
    <part name="ValidateGroupLevelDebitNoteResponse" element="matchingws:ValidateGroupLevelDebitNoteResponse"/>
  </message>
  <message name="ApplyTaxTolerancesResponse">
    <part name="ApplyTaxTolerancesResponse" element="matchingws:ApplyTaxTolerancesResponse"/>
  </message>
  <message name="RefreshGroupResponse">
    <part name="RefreshGroupResponse" element="matchingws:RefreshGroupResponse"/>
  </message>
  <message name="ConvertSundryLineToMatchableLineResponse">
    <part name="ConvertSundryLineToMatchableLineResponse" element="matchingws:ConvertSundryLineToMatchableLineResponse"/>
  </message>
  <message name="CreateSundryLineWithAccountCodeResponse">
    <part name="CreateSundryLineWithAccountCodeResponse" element="matchingws:CreateSundryLineWithAccountCodeResponse"/>
  </message>
  <message name="MoveGroupMembersRequest">
    <part name="MoveGroupMembersRequest" element="matchingws:MoveGroupMembersRequest"/>
  </message>
  <message name="IsInvoiceGreaterThanReceiptRequest">
    <part name="IsInvoiceGreaterThanReceiptRequest" element="matchingws:IsInvoiceGreaterThanReceiptRequest"/>
  </message>
  <message name="GetResponse">
    <part name="GetResponse" element="matchingws:GetResponse"/>
  </message>
  <message name="ValidateDiscrepancyTaxDetailsResponse">
    <part name="ValidateDiscrepancyTaxDetailsResponse" element="matchingws:ValidateDiscrepancyTaxDetailsResponse"/>
  </message>
  <message name="AssignLinesWithFilterRequest">
    <part name="AssignLinesWithFilterRequest" element="matchingws:AssignLinesWithFilterRequest"/>
  </message>
  <message name="PurgeInvoiceAssignmentsRequest">
    <part name="PurgeInvoiceAssignmentsRequest" element="matchingws:PurgeInvoiceAssignmentsRequest"/>
  </message>
  <message name="ResolveAccountCodeLightResponse">
    <part name="ResolveAccountCodeLightResponse" element="matchingws:ResolveAccountCodeLightResponse"/>
  </message>
  <message name="BalanceUnassignedInvoiceLineRequest">
    <part name="BalanceUnassignedInvoiceLineRequest" element="matchingws:BalanceUnassignedInvoiceLineRequest"/>
  </message>
  <message name="DeleteGroupResponse">
    <part name="DeleteGroupResponse" element="matchingws:DeleteGroupResponse"/>
  </message>
  <message name="ApplyDiscrepanciesWithTaxTolerancesResponse">
    <part name="ApplyDiscrepanciesWithTaxTolerancesResponse" element="matchingws:ApplyDiscrepanciesWithTaxTolerancesResponse"/>
  </message>
  <message name="AssignLinesWithFilterResponse">
    <part name="AssignLinesWithFilterResponse" element="matchingws:AssignLinesWithFilterResponse"/>
  </message>
  <message name="ApplyEditsAndToleranceCheckResponse">
    <part name="ApplyEditsAndToleranceCheckResponse" element="matchingws:ApplyEditsAndToleranceCheckResponse"/>
  </message>
  <message name="SaveGroupsResponse">
    <part name="SaveGroupsResponse" element="matchingws:SaveGroupsResponse"/>
  </message>
  <message name="ApplyDocumentTotalToLineDiscrepancyRequest">
    <part name="ApplyDocumentTotalToLineDiscrepancyRequest" element="matchingws:ApplyDocumentTotalToLineDiscrepancyRequest"/>
  </message>
  <message name="MoveGroupMembersResponse">
    <part name="MoveGroupMembersResponse" element="matchingws:MoveGroupMembersResponse"/>
  </message>
  <message name="PurgeInvoiceAssignmentsResponse">
    <part name="PurgeInvoiceAssignmentsResponse" element="matchingws:PurgeInvoiceAssignmentsResponse"/>
  </message>
  <message name="CalculateTaxValueForTaxBalancedInvoiceRequest">
    <part name="CalculateTaxValueForTaxBalancedInvoiceRequest" element="matchingws:CalculateTaxValueForTaxBalancedInvoiceRequest"/>
  </message>
  <message name="EditInvoiceLineResponse">
    <part name="EditInvoiceLineResponse" element="matchingws:EditInvoiceLineResponse"/>
  </message>
  <message name="GetInvoicesRequest">
    <part name="GetInvoicesRequest" element="matchingws:GetInvoicesRequest"/>
  </message>
  <message name="PurgeGroupDiscrepanciesResponse">
    <part name="PurgeGroupDiscrepanciesResponse" element="matchingws:PurgeGroupDiscrepanciesResponse"/>
  </message>
  <message name="EditMLineResponse">
    <part name="EditMLineResponse" element="matchingws:EditMLineResponse"/>
  </message>
  <message name="PurgeInvoiceDiscrepanciesResponse">
    <part name="PurgeInvoiceDiscrepanciesResponse" element="matchingws:PurgeInvoiceDiscrepanciesResponse"/>
  </message>
  <message name="EditMLineRequest">
    <part name="EditMLineRequest" element="matchingws:EditMLineRequest"/>
  </message>
  <message name="ApplyDocumentDiscrepancyResponse">
    <part name="ApplyDocumentDiscrepancyResponse" element="matchingws:ApplyDocumentDiscrepancyResponse"/>
  </message>
  <message name="AssignLinesRequest">
    <part name="AssignLinesRequest" element="matchingws:AssignLinesRequest"/>
  </message>
  <message name="CalculateTaxForSundyLineResponse">
    <part name="CalculateTaxForSundyLineResponse" element="matchingws:CalculateTaxForSundyLineResponse"/>
  </message>
  <message name="RefreshGroupRequest">
    <part name="RefreshGroupRequest" element="matchingws:RefreshGroupRequest"/>
  </message>
  <message name="UpdateInvoiceHeaderPrintableCommentsResponse">
    <part name="UpdateInvoiceHeaderPrintableCommentsResponse" element="matchingws:UpdateInvoiceHeaderPrintableCommentsResponse"/>
  </message>
  <message name="CreateGroupForSingleInvoiceRequest">
    <part name="CreateGroupForSingleInvoiceRequest" element="matchingws:CreateGroupForSingleInvoiceRequest"/>
  </message>
  <message name="ValidateUngroupResponse">
    <part name="ValidateUngroupResponse" element="matchingws:ValidateUngroupResponse"/>
  </message>
  <message name="SplitLineResponse">
    <part name="SplitLineResponse" element="matchingws:SplitLineResponse"/>
  </message>
  <message name="RunBackgroundMatchingResponse">
    <part name="RunBackgroundMatchingResponse" element="matchingws:RunBackgroundMatchingResponse"/>
  </message>
  <message name="CalculateTaxValueForTaxBalancedInvoiceResponse">
    <part name="CalculateTaxValueForTaxBalancedInvoiceResponse" element="matchingws:CalculateTaxValueForTaxBalancedInvoiceResponse"/>
  </message>
  <message name="CreateSundryLineWithAccountCodeRequest">
    <part name="CreateSundryLineWithAccountCodeRequest" element="matchingws:CreateSundryLineWithAccountCodeRequest"/>
  </message>
  <message name="FinaliseRequest">
    <part name="FinaliseRequest" element="matchingws:FinaliseRequest"/>
  </message>
  <message name="UpdateLRNLineCommentsRequest">
    <part name="UpdateLRNLineCommentsRequest" element="matchingws:UpdateLRNLineCommentsRequest"/>
  </message>
  <message name="UngroupRequest">
    <part name="UngroupRequest" element="matchingws:UngroupRequest"/>
  </message>
  <message name="DeleteGroupRequest">
    <part name="DeleteGroupRequest" element="matchingws:DeleteGroupRequest"/>
  </message>
  <message name="ConvertSundryLineToMatchableLineRequest">
    <part name="ConvertSundryLineToMatchableLineRequest" element="matchingws:ConvertSundryLineToMatchableLineRequest"/>
  </message>
  <message name="UpdateInvoiceHeaderPrintableCommentsRequest">
    <part name="UpdateInvoiceHeaderPrintableCommentsRequest" element="matchingws:UpdateInvoiceHeaderPrintableCommentsRequest"/>
  </message>
  <message name="GetAvailableLRNLinesRequest">
    <part name="GetAvailableLRNLinesRequest" element="matchingws:GetAvailableLRNLinesRequest"/>
  </message>
  <message name="CreateSundryLineWithMasterResponse">
    <part name="CreateSundryLineWithMasterResponse" element="matchingws:CreateSundryLineWithMasterResponse"/>
  </message>
  <message name="GetWIPGroupsRequest">
    <part name="GetWIPGroupsRequest" element="matchingws:GetWIPGroupsRequest"/>
  </message>
  <message name="GetLRNLinesRequest">
    <part name="GetLRNLinesRequest" element="matchingws:GetLRNLinesRequest"/>
  </message>
  <message name="PreviewDebitNoteRequest">
    <part name="PreviewDebitNoteRequest" element="matchingws:PreviewDebitNoteRequest"/>
  </message>
  <message name="Options">
    <part name="Options" element="matchingws:Options"/>
  </message>
  <message name="GetAvailableLRNLinesResponse">
    <part name="GetAvailableLRNLinesResponse" element="matchingws:GetAvailableLRNLinesResponse"/>
  </message>
  <message name="CheckLineTolerancesRequest">
    <part name="CheckLineTolerancesRequest" element="matchingws:CheckLineTolerancesRequest"/>
  </message>
  <message name="UpdateLRNLineCommentsResponse">
    <part name="UpdateLRNLineCommentsResponse" element="matchingws:UpdateLRNLineCommentsResponse"/>
  </message>
  <message name="IsInvoiceGreaterThanReceiptResponse">
    <part name="IsInvoiceGreaterThanReceiptResponse" element="matchingws:IsInvoiceGreaterThanReceiptResponse"/>
  </message>
  <message name="RunBackgroundMatchingRequest">
    <part name="RunBackgroundMatchingRequest" element="matchingws:RunBackgroundMatchingRequest"/>
  </message>
  <message name="GetInvoicesResponse">
    <part name="GetInvoicesResponse" element="matchingws:GetInvoicesResponse"/>
  </message>
  <message name="GetAssociatedLRNsRequest">
    <part name="GetAssociatedLRNsRequest" element="matchingws:GetAssociatedLRNsRequest"/>
  </message>
  <message name="CalculateTaxValueRequest">
    <part name="CalculateTaxValueRequest" element="matchingws:CalculateTaxValueRequest"/>
  </message>
  <message name="ApplyDiscrepanciesWithTaxTolerancesRequest">
    <part name="ApplyDiscrepanciesWithTaxTolerancesRequest" element="matchingws:ApplyDiscrepanciesWithTaxTolerancesRequest"/>
  </message>
  <message name="PreviewGroupLevelDebitNoteResponse">
    <part name="PreviewGroupLevelDebitNoteResponse" element="matchingws:PreviewGroupLevelDebitNoteResponse"/>
  </message>
  <message name="PurgeGroupAssignmentsResponse">
    <part name="PurgeGroupAssignmentsResponse" element="matchingws:PurgeGroupAssignmentsResponse"/>
  </message>
  <message name="OptionsResponse">
    <part name="OptionsResponse" element="matchingws:OptionsResponse"/>
  </message>
  <message name="PurgeMLineAssignmentRequest">
    <part name="PurgeMLineAssignmentRequest" element="matchingws:PurgeMLineAssignmentRequest"/>
  </message>
  <message name="GetMLinesForInvoiceResponse">
    <part name="GetMLinesForInvoiceResponse" element="matchingws:GetMLinesForInvoiceResponse"/>
  </message>
  <message name="PurgeInvoiceDiscrepanciesRequest">
    <part name="PurgeInvoiceDiscrepanciesRequest" element="matchingws:PurgeInvoiceDiscrepanciesRequest"/>
  </message>
  <message name="ApplyTaxTolerancesRequest">
    <part name="ApplyTaxTolerancesRequest" element="matchingws:ApplyTaxTolerancesRequest"/>
  </message>
  <message name="PurgeGroupAssignmentsRequest">
    <part name="PurgeGroupAssignmentsRequest" element="matchingws:PurgeGroupAssignmentsRequest"/>
  </message>
  <message name="PurgeInvoiceLineAssignmentsResponse">
    <part name="PurgeInvoiceLineAssignmentsResponse" element="matchingws:PurgeInvoiceLineAssignmentsResponse"/>
  </message>
  <message name="FinaliseResponse">
    <part name="FinaliseResponse" element="matchingws:FinaliseResponse"/>
  </message>
  <message name="GetMLinesForInvoiceRequest">
    <part name="GetMLinesForInvoiceRequest" element="matchingws:GetMLinesForInvoiceRequest"/>
  </message>
  <message name="ConvertToSundryLineResponse">
    <part name="ConvertToSundryLineResponse" element="matchingws:ConvertToSundryLineResponse"/>
  </message>
  <message name="PurgeMLineRequest">
    <part name="PurgeMLineRequest" element="matchingws:PurgeMLineRequest"/>
  </message>
  <message name="GetWIPGroupsResponse">
    <part name="GetWIPGroupsResponse" element="matchingws:GetWIPGroupsResponse"/>
  </message>
  <message name="CalculateTaxValueResponse">
    <part name="CalculateTaxValueResponse" element="matchingws:CalculateTaxValueResponse"/>
  </message>
  <message name="CreateSundryLineWithMasterRequest">
    <part name="CreateSundryLineWithMasterRequest" element="matchingws:CreateSundryLineWithMasterRequest"/>
  </message>
  <message name="GetLRNsResponse">
    <part name="GetLRNsResponse" element="matchingws:GetLRNsResponse"/>
  </message>
  <message name="PreviewDebitNoteResponse">
    <part name="PreviewDebitNoteResponse" element="matchingws:PreviewDebitNoteResponse"/>
  </message>
  <message name="GetAssociatedLRNsResponse">
    <part name="GetAssociatedLRNsResponse" element="matchingws:GetAssociatedLRNsResponse"/>
  </message>
  <message name="UngroupResponse">
    <part name="UngroupResponse" element="matchingws:UngroupResponse"/>
  </message>
  <message name="ManuallyAssignLinesResponse">
    <part name="ManuallyAssignLinesResponse" element="matchingws:ManuallyAssignLinesResponse"/>
  </message>
  <message name="ValidateUngroupRequest">
    <part name="ValidateUngroupRequest" element="matchingws:ValidateUngroupRequest"/>
  </message>
  <message name="EditInvoiceLineRequest">
    <part name="EditInvoiceLineRequest" element="matchingws:EditInvoiceLineRequest"/>
  </message>
  <message name="ResolveAccountCodeRequest">
    <part name="ResolveAccountCodeRequest" element="matchingws:ResolveAccountCodeRequest"/>
  </message>
  <message name="GetLRNsRequest">
    <part name="GetLRNsRequest" element="matchingws:GetLRNsRequest"/>
  </message>
  <message name="ApplyGroupTotalToLineDiscrepancyRequest">
    <part name="ApplyGroupTotalToLineDiscrepancyRequest" element="matchingws:ApplyGroupTotalToLineDiscrepancyRequest"/>
  </message>
  <message name="ChangeDiscrepancyResponse">
    <part name="ChangeDiscrepancyResponse" element="matchingws:ChangeDiscrepancyResponse"/>
  </message>
  <message name="GetRequest">
    <part name="GetRequest" element="matchingws:GetRequest"/>
  </message>
  <message name="PurgeGroupDiscrepanciesRequest">
    <part name="PurgeGroupDiscrepanciesRequest" element="matchingws:PurgeGroupDiscrepanciesRequest"/>
  </message>
  <message name="PurgeInvoiceLineAssignmentsRequest">
    <part name="PurgeInvoiceLineAssignmentsRequest" element="matchingws:PurgeInvoiceLineAssignmentsRequest"/>
  </message>
  <message name="SaveGroupAsWIPResponse">
    <part name="SaveGroupAsWIPResponse" element="matchingws:SaveGroupAsWIPResponse"/>
  </message>
  <message name="ApplyDocumentDiscrepancyRequest">
    <part name="ApplyDocumentDiscrepancyRequest" element="matchingws:ApplyDocumentDiscrepancyRequest"/>
  </message>
  <message name="PreviewGroupLevelDebitNoteRequest">
    <part name="PreviewGroupLevelDebitNoteRequest" element="matchingws:PreviewGroupLevelDebitNoteRequest"/>
  </message>
  <message name="PurgeMLineResponse">
    <part name="PurgeMLineResponse" element="matchingws:PurgeMLineResponse"/>
  </message>
  <message name="CreateGroupForSingleInvoiceResponse">
    <part name="CreateGroupForSingleInvoiceResponse" element="matchingws:CreateGroupForSingleInvoiceResponse"/>
  </message>
  <message name="AddToGroupRequest">
    <part name="AddToGroupRequest" element="matchingws:AddToGroupRequest"/>
  </message>
  <message name="CheckLineTolerancesResponse">
    <part name="CheckLineTolerancesResponse" element="matchingws:CheckLineTolerancesResponse"/>
  </message>
  <message name="ApplyDiscrepanciesRequest">
    <part name="ApplyDiscrepanciesRequest" element="matchingws:ApplyDiscrepanciesRequest"/>
  </message>
  <message name="GetLRNLinesResponse">
    <part name="GetLRNLinesResponse" element="matchingws:GetLRNLinesResponse"/>
  </message>
  <message name="CheckDocumentTolerancesResponse">
    <part name="CheckDocumentTolerancesResponse" element="matchingws:CheckDocumentTolerancesResponse"/>
  </message>
  <message name="ApplyGroupTotalToLineDiscrepancyResponse">
    <part name="ApplyGroupTotalToLineDiscrepancyResponse" element="matchingws:ApplyGroupTotalToLineDiscrepancyResponse"/>
  </message>
  <message name="ConvertToSundryLineRequest">
    <part name="ConvertToSundryLineRequest" element="matchingws:ConvertToSundryLineRequest"/>
  </message>
  <message name="CreateGroupRequest">
    <part name="CreateGroupRequest" element="matchingws:CreateGroupRequest"/>
  </message>
  <message name="ResolveAccountCodeLightRequest">
    <part name="ResolveAccountCodeLightRequest" element="matchingws:ResolveAccountCodeLightRequest"/>
  </message>
  <message name="ResolveAccountCodeResponse">
    <part name="ResolveAccountCodeResponse" element="matchingws:ResolveAccountCodeResponse"/>
  </message>
  <message name="CheckDocumentTolerancesRequest">
    <part name="CheckDocumentTolerancesRequest" element="matchingws:CheckDocumentTolerancesRequest"/>
  </message>
  <message name="PurgeMLineAssignmentResponse">
    <part name="PurgeMLineAssignmentResponse" element="matchingws:PurgeMLineAssignmentResponse"/>
  </message>
  <message name="SaveGroupAsWIPRequest">
    <part name="SaveGroupAsWIPRequest" element="matchingws:SaveGroupAsWIPRequest"/>
  </message>
  <message name="SaveGroupsRequest">
    <part name="SaveGroupsRequest" element="matchingws:SaveGroupsRequest"/>
  </message>
  <message name="ApplyDiscrepanciesResponse">
    <part name="ApplyDiscrepanciesResponse" element="matchingws:ApplyDiscrepanciesResponse"/>
  </message>
  <message name="BalanceUnassignedInvoiceLineResponse">
    <part name="BalanceUnassignedInvoiceLineResponse" element="matchingws:BalanceUnassignedInvoiceLineResponse"/>
  </message>
  <portType name="PIMMatchingServicePortTypes">
    <operation name="PurgeGroupDiscrepancies">
      <input message="matchingws:PurgeGroupDiscrepanciesRequest"/>
      <output message="matchingws:PurgeGroupDiscrepanciesResponse"/>
    </operation>
    <operation name="AssignLinesWithFilter">
      <input message="matchingws:AssignLinesWithFilterRequest"/>
      <output message="matchingws:AssignLinesWithFilterResponse"/>
    </operation>
    <operation name="PurgeGroupAssignments">
      <input message="matchingws:PurgeGroupAssignmentsRequest"/>
      <output message="matchingws:PurgeGroupAssignmentsResponse"/>
    </operation>
    <operation name="SplitLine">
      <input message="matchingws:SplitLineRequest"/>
      <output message="matchingws:SplitLineResponse"/>
    </operation>
    <operation name="ChangeDiscrepancy">
      <input message="matchingws:ChangeDiscrepancyRequest"/>
      <output message="matchingws:ChangeDiscrepancyResponse"/>
    </operation>
    <operation name="GetInvoices">
      <input message="matchingws:GetInvoicesRequest"/>
      <output message="matchingws:GetInvoicesResponse"/>
    </operation>
    <operation name="BalanceUnassignedInvoiceLine">
      <input message="matchingws:BalanceUnassignedInvoiceLineRequest"/>
      <output message="matchingws:BalanceUnassignedInvoiceLineResponse"/>
    </operation>
    <operation name="GetAssociatedLRNs">
      <input message="matchingws:GetAssociatedLRNsRequest"/>
      <output message="matchingws:GetAssociatedLRNsResponse"/>
    </operation>
    <operation name="IsInvoiceGreaterThanReceipt">
      <input message="matchingws:IsInvoiceGreaterThanReceiptRequest"/>
      <output message="matchingws:IsInvoiceGreaterThanReceiptResponse"/>
    </operation>
    <operation name="CalculateTaxForSundyLine">
      <input message="matchingws:CalculateTaxForSundyLineRequest"/>
      <output message="matchingws:CalculateTaxForSundyLineResponse"/>
    </operation>
    <operation name="ApplyDocumentTotalToLineDiscrepancy">
      <input message="matchingws:ApplyDocumentTotalToLineDiscrepancyRequest"/>
      <output message="matchingws:ApplyDocumentTotalToLineDiscrepancyResponse"/>
    </operation>
    <operation name="GetLRNs">
      <input message="matchingws:GetLRNsRequest"/>
      <output message="matchingws:GetLRNsResponse"/>
    </operation>
    <operation name="ValidateUngroup">
      <input message="matchingws:ValidateUngroupRequest"/>
      <output message="matchingws:ValidateUngroupResponse"/>
    </operation>
    <operation name="ApplyDocumentDiscrepancy">
      <input message="matchingws:ApplyDocumentDiscrepancyRequest"/>
      <output message="matchingws:ApplyDocumentDiscrepancyResponse"/>
    </operation>
    <operation name="CreateSundryLineWithMaster">
      <input message="matchingws:CreateSundryLineWithMasterRequest"/>
      <output message="matchingws:CreateSundryLineWithMasterResponse"/>
    </operation>
    <operation name="ManuallyAssignLines">
      <input message="matchingws:ManuallyAssignLinesRequest"/>
      <output message="matchingws:ManuallyAssignLinesResponse"/>
    </operation>
    <operation name="PreviewGroupLevelDebitNote">
      <input message="matchingws:PreviewGroupLevelDebitNoteRequest"/>
      <output message="matchingws:PreviewGroupLevelDebitNoteResponse"/>
    </operation>
    <operation name="PurgeInvoiceAssignments">
      <input message="matchingws:PurgeInvoiceAssignmentsRequest"/>
      <output message="matchingws:PurgeInvoiceAssignmentsResponse"/>
    </operation>
    <operation name="RunBackgroundMatching">
      <input message="matchingws:RunBackgroundMatchingRequest"/>
      <output message="matchingws:RunBackgroundMatchingResponse"/>
    </operation>
    <operation name="CreateGroupForSingleInvoice">
      <input message="matchingws:CreateGroupForSingleInvoiceRequest"/>
      <output message="matchingws:CreateGroupForSingleInvoiceResponse"/>
    </operation>
    <operation name="EditInvoiceLine">
      <input message="matchingws:EditInvoiceLineRequest"/>
      <output message="matchingws:EditInvoiceLineResponse"/>
    </operation>
    <operation name="PurgeInvoiceDiscrepancies">
      <input message="matchingws:PurgeInvoiceDiscrepanciesRequest"/>
      <output message="matchingws:PurgeInvoiceDiscrepanciesResponse"/>
    </operation>
    <operation name="UpdateLRNLineComments">
      <input message="matchingws:UpdateLRNLineCommentsRequest"/>
      <output message="matchingws:UpdateLRNLineCommentsResponse"/>
    </operation>
    <operation name="RefreshGroup">
      <input message="matchingws:RefreshGroupRequest"/>
      <output message="matchingws:RefreshGroupResponse"/>
    </operation>
    <operation name="Get">
      <input message="matchingws:GetRequest"/>
      <output message="matchingws:GetResponse"/>
    </operation>
    <operation name="ResolveAccountCode">
      <input message="matchingws:ResolveAccountCodeRequest"/>
      <output message="matchingws:ResolveAccountCodeResponse"/>
    </operation>
    <operation name="CalculateTaxValueForTaxBalancedInvoice">
      <input message="matchingws:CalculateTaxValueForTaxBalancedInvoiceRequest"/>
      <output message="matchingws:CalculateTaxValueForTaxBalancedInvoiceResponse"/>
    </operation>
    <operation name="PurgeInvoiceLineAssignments">
      <input message="matchingws:PurgeInvoiceLineAssignmentsRequest"/>
      <output message="matchingws:PurgeInvoiceLineAssignmentsResponse"/>
    </operation>
    <operation name="CheckDocumentTolerances">
      <input message="matchingws:CheckDocumentTolerancesRequest"/>
      <output message="matchingws:CheckDocumentTolerancesResponse"/>
    </operation>
    <operation name="DeleteGroup">
      <input message="matchingws:DeleteGroupRequest"/>
      <output message="matchingws:DeleteGroupResponse"/>
    </operation>
    <operation name="SaveGroupAsWIP">
      <input message="matchingws:SaveGroupAsWIPRequest"/>
      <output message="matchingws:SaveGroupAsWIPResponse"/>
    </operation>
    <operation name="CalculateTaxValue">
      <input message="matchingws:CalculateTaxValueRequest"/>
      <output message="matchingws:CalculateTaxValueResponse"/>
    </operation>
    <operation name="ApplyEditsAndToleranceCheck">
      <input message="matchingws:ApplyEditsAndToleranceCheckRequest"/>
      <output message="matchingws:ApplyEditsAndToleranceCheckResponse"/>
    </operation>
    <operation name="PurgeMLineAssignment">
      <input message="matchingws:PurgeMLineAssignmentRequest"/>
      <output message="matchingws:PurgeMLineAssignmentResponse"/>
    </operation>
    <operation name="ApplyGroupTotalToLineDiscrepancy">
      <input message="matchingws:ApplyGroupTotalToLineDiscrepancyRequest"/>
      <output message="matchingws:ApplyGroupTotalToLineDiscrepancyResponse"/>
    </operation>
    <operation name="SaveGroups">
      <input message="matchingws:SaveGroupsRequest"/>
      <output message="matchingws:SaveGroupsResponse"/>
    </operation>
    <operation name="UpdateInvoiceHeaderPrintableComments">
      <input message="matchingws:UpdateInvoiceHeaderPrintableCommentsRequest"/>
      <output message="matchingws:UpdateInvoiceHeaderPrintableCommentsResponse"/>
    </operation>
    <operation name="ValidateDiscrepancyTaxDetails">
      <input message="matchingws:ValidateDiscrepancyTaxDetailsRequest"/>
      <output message="matchingws:ValidateDiscrepancyTaxDetailsResponse"/>
    </operation>
    <operation name="GetMLinesForInvoice">
      <input message="matchingws:GetMLinesForInvoiceRequest"/>
      <output message="matchingws:GetMLinesForInvoiceResponse"/>
    </operation>
    <operation name="GetAvailableLRNLines">
      <input message="matchingws:GetAvailableLRNLinesRequest"/>
      <output message="matchingws:GetAvailableLRNLinesResponse"/>
    </operation>
    <operation name="ApplyDiscrepanciesWithTaxTolerances">
      <input message="matchingws:ApplyDiscrepanciesWithTaxTolerancesRequest"/>
      <output message="matchingws:ApplyDiscrepanciesWithTaxTolerancesResponse"/>
    </operation>
    <operation name="ApplyDiscrepancies">
      <input message="matchingws:ApplyDiscrepanciesRequest"/>
      <output message="matchingws:ApplyDiscrepanciesResponse"/>
    </operation>
    <operation name="ConvertToSundryLine">
      <input message="matchingws:ConvertToSundryLineRequest"/>
      <output message="matchingws:ConvertToSundryLineResponse"/>
    </operation>
    <operation name="Finalise">
      <input message="matchingws:FinaliseRequest"/>
      <output message="matchingws:FinaliseResponse"/>
    </operation>
    <operation name="ApplyTaxTolerances">
      <input message="matchingws:ApplyTaxTolerancesRequest"/>
      <output message="matchingws:ApplyTaxTolerancesResponse"/>
    </operation>
    <operation name="MoveGroupMembers">
      <input message="matchingws:MoveGroupMembersRequest"/>
      <output message="matchingws:MoveGroupMembersResponse"/>
    </operation>
    <operation name="EditMLine">
      <input message="matchingws:EditMLineRequest"/>
      <output message="matchingws:EditMLineResponse"/>
    </operation>
    <operation name="Ungroup">
      <input message="matchingws:UngroupRequest"/>
      <output message="matchingws:UngroupResponse"/>
    </operation>
    <operation name="CreateGroup">
      <input message="matchingws:CreateGroupRequest"/>
      <output message="matchingws:CreateGroupResponse"/>
    </operation>
    <operation name="AddToGroup">
      <input message="matchingws:AddToGroupRequest"/>
      <output message="matchingws:AddToGroupResponse"/>
    </operation>
    <operation name="PurgeMLine">
      <input message="matchingws:PurgeMLineRequest"/>
      <output message="matchingws:PurgeMLineResponse"/>
    </operation>
    <operation name="CheckLineTolerances">
      <input message="matchingws:CheckLineTolerancesRequest"/>
      <output message="matchingws:CheckLineTolerancesResponse"/>
    </operation>
    <operation name="GetWIPGroups">
      <input message="matchingws:GetWIPGroupsRequest"/>
      <output message="matchingws:GetWIPGroupsResponse"/>
    </operation>
    <operation name="AssignLines">
      <input message="matchingws:AssignLinesRequest"/>
      <output message="matchingws:AssignLinesResponse"/>
    </operation>
    <operation name="PreviewDebitNote">
      <input message="matchingws:PreviewDebitNoteRequest"/>
      <output message="matchingws:PreviewDebitNoteResponse"/>
    </operation>
    <operation name="GetLRNLines">
      <input message="matchingws:GetLRNLinesRequest"/>
      <output message="matchingws:GetLRNLinesResponse"/>
    </operation>
    <operation name="CreateSundryLineWithAccountCode">
      <input message="matchingws:CreateSundryLineWithAccountCodeRequest"/>
      <output message="matchingws:CreateSundryLineWithAccountCodeResponse"/>
    </operation>
    <operation name="ValidateGroupLevelDebitNote">
      <input message="matchingws:ValidateGroupLevelDebitNoteRequest"/>
      <output message="matchingws:ValidateGroupLevelDebitNoteResponse"/>
    </operation>
    <operation name="ConvertSundryLineToMatchableLine">
      <input message="matchingws:ConvertSundryLineToMatchableLineRequest"/>
      <output message="matchingws:ConvertSundryLineToMatchableLineResponse"/>
    </operation>
    <operation name="ResolveAccountCodeLight">
      <input message="matchingws:ResolveAccountCodeLightRequest"/>
      <output message="matchingws:ResolveAccountCodeLightResponse"/>
    </operation>
  </portType>
  <binding name="PIMMatchingServiceSOAPBinding" type="matchingws:PIMMatchingServicePortTypes">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="PurgeGroupDiscrepancies">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/PurgeGroupDiscrepancies" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="AssignLinesWithFilter">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/AssignLinesWithFilter" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="PurgeGroupAssignments">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/PurgeGroupAssignments" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="SplitLine">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/SplitLine" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ChangeDiscrepancy">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ChangeDiscrepancy" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="GetInvoices">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/GetInvoices" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="BalanceUnassignedInvoiceLine">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/BalanceUnassignedInvoiceLine" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="GetAssociatedLRNs">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/GetAssociatedLRNs" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="IsInvoiceGreaterThanReceipt">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/IsInvoiceGreaterThanReceipt" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="CalculateTaxForSundyLine">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/CalculateTaxForSundyLine" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ApplyDocumentTotalToLineDiscrepancy">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ApplyDocumentTotalToLineDiscrepancy" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="GetLRNs">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/GetLRNs" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ValidateUngroup">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ValidateUngroup" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ApplyDocumentDiscrepancy">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ApplyDocumentDiscrepancy" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateSundryLineWithMaster">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/CreateSundryLineWithMaster" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ManuallyAssignLines">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ManuallyAssignLines" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="PreviewGroupLevelDebitNote">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/PreviewGroupLevelDebitNote" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="PurgeInvoiceAssignments">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/PurgeInvoiceAssignments" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="RunBackgroundMatching">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/RunBackgroundMatching" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateGroupForSingleInvoice">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/CreateGroupForSingleInvoice" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="EditInvoiceLine">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/EditInvoiceLine" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="PurgeInvoiceDiscrepancies">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/PurgeInvoiceDiscrepancies" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="UpdateLRNLineComments">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/UpdateLRNLineComments" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="RefreshGroup">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/RefreshGroup" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="Get">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/Get" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ResolveAccountCode">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ResolveAccountCode" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="CalculateTaxValueForTaxBalancedInvoice">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/CalculateTaxValueForTaxBalancedInvoice" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="PurgeInvoiceLineAssignments">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/PurgeInvoiceLineAssignments" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="CheckDocumentTolerances">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/CheckDocumentTolerances" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="DeleteGroup">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/DeleteGroup" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="SaveGroupAsWIP">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/SaveGroupAsWIP" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="CalculateTaxValue">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/CalculateTaxValue" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ApplyEditsAndToleranceCheck">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ApplyEditsAndToleranceCheck" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="PurgeMLineAssignment">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/PurgeMLineAssignment" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ApplyGroupTotalToLineDiscrepancy">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ApplyGroupTotalToLineDiscrepancy" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="SaveGroups">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/SaveGroups" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="UpdateInvoiceHeaderPrintableComments">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/UpdateInvoiceHeaderPrintableComments" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ValidateDiscrepancyTaxDetails">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ValidateDiscrepancyTaxDetails" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="GetMLinesForInvoice">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/GetMLinesForInvoice" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="GetAvailableLRNLines">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/GetAvailableLRNLines" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ApplyDiscrepanciesWithTaxTolerances">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ApplyDiscrepanciesWithTaxTolerances" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ApplyDiscrepancies">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ApplyDiscrepancies" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ConvertToSundryLine">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ConvertToSundryLine" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="Finalise">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/Finalise" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ApplyTaxTolerances">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ApplyTaxTolerances" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="MoveGroupMembers">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/MoveGroupMembers" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="EditMLine">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/EditMLine" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="Ungroup">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/Ungroup" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateGroup">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/CreateGroup" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="AddToGroup">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/AddToGroup" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="PurgeMLine">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/PurgeMLine" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="CheckLineTolerances">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/CheckLineTolerances" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="GetWIPGroups">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/GetWIPGroups" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="AssignLines">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/AssignLines" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="PreviewDebitNote">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/PreviewDebitNote" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="GetLRNLines">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/GetLRNLines" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateSundryLineWithAccountCode">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/CreateSundryLineWithAccountCode" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ValidateGroupLevelDebitNote">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ValidateGroupLevelDebitNote" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ConvertSundryLineToMatchableLine">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ConvertSundryLineToMatchableLine" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="ResolveAccountCodeLight">
<documentation></documentation>
      <soap:operation soapAction="uri-coda-webservice/14.000.0011/pim/PIMMatching/ResolveAccountCodeLight" style="document"/>
      <input>
        <soap:header message="matchingws:Options" part="Options" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:header message="matchingws:OptionsResponse" part="OptionsResponse" use="literal">
        </soap:header>
        <soap:body use="literal"/>
      </output>
    </operation>
  </binding>
  <service name="PIMMatchingService">
    <port name="PIMMatchingServicePort" binding="matchingws:PIMMatchingServiceSOAPBinding">
      <soap:address location="http://localhost:8080/coda/services/pim/matching/pimmatching-13.0"/>
    </port>
  </service>
</definitions>
